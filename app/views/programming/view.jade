- var docId = 'test';
style
  ul.fileTree {
    font-family: Verdana, sans-serif;
    font-size: 11px;
    line-height: 18px;
    padding: 0px;
    margin: 0px;
  }

  ul.fileTree li {
    list-style: none;
    padding: 0px;
    padding-left: 20px;
    margin: 0px;
    white-space: nowrap;
  }

  ul.fileTree a {
    color: #333;
    text-decoration: none;
    display: block;
    padding: 0px 2px;
  }

  ul.fileTree a:hover,
  ul.fileTree a.selected {
    background: #BDF;
  }

  /* Core Styles */
  .fileTree li.directory { background: url(/img/fileTree/directory.png) left top no-repeat; }
  .fileTree li.expanded { background: url(/img/fileTree/folder_open.png) left top no-repeat; }
  .fileTree li.file { background: url(/img/fileTree/file.png) left top no-repeat; }
  .fileTree li.wait { background: url(/img/fileTree/spinner.gif) left top no-repeat; }


.container 
  div#header
      //- TODO:: Re write header
  #sidebar(style="display: inline-block; width:25%;vertical-align:top;")
    button#save(class="btn", type="button") Save

    #tree

  #editor(style='position:relative;width:75%;min-height:500px;display:inline-block;')
  script(src="/javascripts/share/bcsocket.js")
  script(src="/share/share.js")

  link(rel="stylesheet", href="/stylesheets/jquery.contextMenu.css")
  script(src="/javascripts/superagent.min.js")
  script(src="/javascripts/ace_2/ace.js")
  script(src="/javascripts/jquery.contextMenu.js")
  script(src="/javascripts/vfs-client.js")
  script(src="/javascripts/filetree.js")
  //script(src="/javascripts/ace_2/theme-solarized_dark.js")
  //script(src="/javascripts/share/share.uncompressed.js")
  script
    var themes = {};
    var modes = {};
    var editor;

    function loadTheme(name) {
      //check if the theme source files have been loaded before
      if(themes[name]){
        editor.setTheme(themes[name]);
        return;
      }

      var fileName = "/javascripts/ace_2/theme-" + name + ".js";
      loadScriptFile(fileName, function(){
        var path = "ace/theme/"+name;
        themes[name] = path;
        editor.setTheme(path);
      });
    }

    var modes = {};
    function loadMode(name){
      $('#language .label').text(name);
      //check if the language source files have been loaded before
      if(modes[name]) {
        editor.getSession().setMode(new modes[name]);
        return;
      }

      var fileName = "/javascripts/ace_2/mode-" + name + ".js";
      loadScriptFile(fileName, function(){
        var Mode = require("ace/mode/"+name).Mode;
        modes[name] = Mode;
        editor.getSession().setMode(new Mode());
      });
    }

    //dynamically load javascript source file
    function loadScriptFile(path, callback) {
      var head = document.getElementsByTagName('head')[0];
      var s = document.createElement('script');

      s.src = path;
      head.appendChild(s);

      s.onload = callback;
    }


    // Tree operations
    function newFile(caller) {
      var $parentDir = $(caller).hasClass('directory') ? $(caller) : $(caller).closest('.directory');
      var path = $parentDir.children('a').attr('rel');

      // TODO: Logic to figure out unique name
      var name = 'untitled';
      vfs.newFile(name, path, function(error) {
        var $file = $('<li/>', { class: 'file' }).append($('<a/>', { html: name, href: '#', rel: path + name }));
        $parentDir.append($file);
      });
    }

    function newDir(caller) {
      var $parentDir = $(caller).hasClass('directory') ? $(caller) : $(caller).closest('.directory');
      var path = $parentDir.children('a').attr('rel');

      // TODO: Logic to figure out unique name
      var name = 'untitled';
      vfs.newDir(name, path, function(error) {
        var $dir = $('<li/>', { class: 'directory' }).append($('<a/>', { html: name, href: '#', rel: path + name + '/' }));
        $parentDir.append($dir);
      });
    }

    // For rename File or Directory at UI side
    function renameFinish(caller) {
      
      var anchor = $(caller).children('a');
      var newPath = oldPath = anchor.attr('rel');
      var oldName = anchor.html();
      var newName = $(caller).children('input').val();
      if(newName.trim() != "") {
        anchor.html(newName);
        var path = anchor.attr('rel');
        
        if(caller.hasClass('file')) {
          var pattern = new RegExp(oldName + "$");
          anchor.attr('rel', path.replace(pattern, newName));
        } else {
          var pattern = new RegExp(oldName + "\\/$");
          anchor.attr('rel', path.replace(pattern, newName)+"/");
        }
        
        caller.children('input').remove();
        anchor.css('display', 'block');
        newPath = anchor.attr('rel');
      }
      else{
        caller.children('input').remove();
      }
      
      // Call to VFS Rename Function As per requirement
      vfs.rename(newPath, oldPath, function(error) {
        if(error){
          console.log(error);
        } 
      });
    }

    function rename(caller) {

      var $input = $('<input/>', {
        type: 'text',
        value: $(caller).children('a').html()
      });

      $(caller).children('a').css('display', 'none');
      $(caller).append($input);
      $input.focus();
      $input.bind({
        keypress: function() {
          if(event.keyCode == 13) {
            renameFinish(caller);
          }
        },
        blur: function() {
          renameFinish(caller);
        }
      }); 
    }

    function remove(caller) {
      var $parentDir = $(caller).hasClass('directory') ? $(caller) : $(caller).closest('.directory');
      var path = $parentDir.children('a').attr('rel');
      var removeItem ;
      $(caller).hasClass('file') ? removeItem = vfs.removeFile : removeItem = vfs.removeDir ;
      removeItem(path, function(error) {
        if(!error) {
          caller.remove();
        }
      });
    }

    function newEditor() {
      var editor = ace.edit("editor");
      //editor.setReadOnly(true);
      editor.getSession().setUseSoftTabs(true);
      editor.getSession().setTabSize(2);
      //editor.getSession().setMode(new (require("ace/mode/coffee").Mode));
      loadMode("java");
      loadTheme("textmate");

      return editor;
    }

    $(document).ready(function() {
      editor = newEditor();

      // Initialize tree
      // TODO: Replace hardcoded bucketid with dynamic one
      window.vfs = new VFSClient('test');
      $('#tree').fileTree(vfs);

      // Initialize right-click context menu
      $.contextMenu({
        selector: '.directory, .file',
        callback: function(key, options) {
          switch(key) {
            case 'newFile':
              newFile(this);
              break;
            case 'newDir':
              newDir(this);
              break;
            case 'rename':
              rename(this);
              break;
            case 'remove':
              remove(this);
              break;
          }
        },
        items: {
          newFile: { name: 'New File' },
          newDir: { name: 'New Directory' },
          rename: { name: 'Rename' },
          remove: { name: 'Remove' }
        }
      });

      window.loadFile = function(content) {
        // TODO: Load new document
        editor.getSession().setDocument(new Document(content));
      };

      $('#save').click(function() {
        var path = $('.selected').attr('rel');
        var content = editor.getSession().toString();
        console.log(content);
        vfs.saveFile(path, content, function() {
          console.log('saved');
        });
        return false;
      });

      sharejs.open('#{docId}', 'text', function(error, doc) {
        if (error) {
          console.error(error);
          return;
        }

        if (doc.created) {
          doc.insert(0, "# Coffeescript editor!\n\nexports.foo = ->\n  console.log 'hi!'");
        }

        doc.attach_ace(editor);
        editor.setReadOnly(false);
      });
    });
